---
# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the ODPi Egeria project.

- name: setup Information Server variables
  import_role:
    name: IBM.infosvr
    tasks_from: setup_vars.yml

- name: setup Information Server certificate
  import_role:
    name: IBM.infosvr
    tasks_from: get_certificate.yml

- name: post-check remote database catalog status
  shell: "source ~/.bashrc && db2 list database directory"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_users.db2inst1 }}"
  become: yes
  ignore_errors: yes
  register: __minimal_db2catalog_completion
  changed_when: False
  when: >
    ('ibm_information_server_engine' in group_names)
    and (egeria_samples_minimal_db_type == 'ibm-db2')

- name: catalog remote data nodes
  shell: >
          source ~/.bashrc &&
          db2 catalog database {{ item | upper }} at node REPO &&
          db2 terminate
  args:
    executable: /bin/bash
  when: >
    ('ibm_information_server_engine' in group_names)
    and (egeria_samples_minimal_db_type == 'ibm-db2')
    and __minimal_db2catalog_completion.stdout.find(item) == -1
  with_items: "{{ egeria_samples_minimal_databases }}"
  become_user: "{{ ibm_infosvr_users.db2inst1 }}"
  become: yes

- name: setup mappings
  set_fact:
    rest_mappings:
      - { type: "host", property: "name", from: "ENG.INFOSVR.VAGRANT.IBM.COM", to: "{{ groups['ibm_information_server_engine'][0] | upper }}" }
      - { type: "host_(engine)", property: "name", from: "ENG.INFOSVR.VAGRANT.IBM.COM", to: "{{ groups['ibm_information_server_engine'][0] | upper }}" }
      - { type: "host", property: "name", from: "DB.INFOSVR.VAGRANT.IBM.COM", to: "{{ egeria_samples_db_host_remote | upper }}" }
      - { type: "host_(engine)", property: "name", from: "DB.INFOSVR.VAGRANT.IBM.COM", to: "{{ egeria_samples_db_host_remote | upper }}" }
      - { type: "data_file", property: "path", from: "/data/files/minimal", to: "{{ egeria_samples_minimal_targets.files }}" }
    iaxml_mappings:
      - { type: "DataSource", attr: "host", from: "DB.INFOSVR.VAGRANT.IBM.COM", to: "{{ egeria_samples_db_host_remote | upper }}" }

- name: harvest file metadata via IBM Metadata Asset Manager
  include_role:
    name: IBM.infosvr-metadata-asset-manager
  vars:
    import_areas:
      - name: Minimal_SampleFiles
        type: LocalFileConnector
        description: "Loads metadata for Minimal sample files"
        metadata_interchange_server: "{{ groups['ibm_information_server_engine'][0] | lower }}"
        dcn:
          name: LOCALFS
        assets_to_import:
          - "folder[{{ egeria_samples_minimal_targets.files }}]"
        hostname: "{{ groups['ibm_information_server_engine'][0] | upper }}"

- name: harvest DB2 metadata via IBM Metadata Asset Manager
  include_role:
    name: IBM.infosvr-metadata-asset-manager
  vars:
    import_areas:
      - name: Minimal_{{ db_name }}
        type: DB2Connector
        description: "Import area for Minimal {{ db_name }} sample database"
        metadata_interchange_server: "{{ groups['ibm_information_server_engine'][0] | lower }}"
        dcn:
          name: Minimal_{{ db_name }}_{{ egeria_samples_minimal_db_type }}
          description: "Minimal DB2 connection"
          database: "{{ db_name | upper }}"
          username: "{{ egeria_samples_db_credentials.owner }}"
          password: "{{ egeria_samples_db_credentials.passwd }}"
        assets_to_import:
            - "database[{{ db_name | upper }}]"
        hostname: "{{ egeria_samples_db_host_remote | upper }}"
        database_name: "{{ db_name | upper }}"
  with_items: "{{ egeria_samples_minimal_databases }}"
  when: (egeria_samples_minimal_db_type == 'ibm-db2')
  loop_control:
    loop_var: db_name

- name: list DataStage projects
  shell: >
    source ~/.bashrc &&
    source dsenv &&
    ./bin/dsadmin
    -url https://{{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports_ext.console }}
    -user {{ ibm_infosvr_users.isadmin }} -password {{ ibm_infosvr_upwds.isadmin }}
    -server {{ groups['ibm_information_server_engine'][0] | upper }}
    -listprojects
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_locations.linux }}/Server/DSEngine"
  become: yes
  register: __minimal_projects_list
  changed_when: False
  when: ('ibm_information_server_engine' in group_names)

- name: create a new DataStage project
  shell: >
          source ~/.bashrc &&
          source dsenv &&
          ./bin/dsadmin
          -url https://{{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports_ext.console }}
          -user {{ ibm_infosvr_users.isadmin }} -password {{ ibm_infosvr_upwds.isadmin }}
          -server {{ groups['ibm_information_server_engine'][0] | upper }}
          -createproject minimal
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_locations.linux }}/Server/DSEngine"
  become: yes
  when: >
    ('ibm_information_server_engine' in group_names)
    and __minimal_projects_list.stdout.find('minimal') == -1

- name: get minimal lineage details
  uri:
    url: "https://{{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports_ext.console }}\
          /ibm/iis/igc-rest/v1/search/"
    method: POST
    user: "{{ ibm_infosvr_users.isadmin }}"
    password: "{{ ibm_infosvr_upwds.isadmin }}"
    body: >-
      {
        "properties": ["name", "include_for_lineage"],
        "types": ["transformation_project"],
        "where": {
          "conditions": [{
            "value": "minimal", "property": "name", "operator": "="
          }],
          "operator":"and"
        }
      }
    body_format: json
    validate_certs: no
    status_code: 200
    headers:
      Content-Type: "application/json"
  changed_when: False
  register: __minimal_lineage
  when: ('ibm_information_server_domain' in group_names)

- name: enable lineage on minimal
  uri:
    url: "https://{{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports_ext.console }}\
            /ibm/iis/igc-rest/v1/assets/{{ __minimal_lineage.json['items'][0]._id }}/include_for_lineage"
    method: PUT
    body: '"setToTrue"'
    body_format: json
    validate_certs: no
    status_code: 200
    headers:
      Content-Type: "application/json"
      Cookie: "{{ __minimal_lineage.set_cookie }}"
  when: ('ibm_information_server_domain' in group_names) and __minimal_lineage.json['items'][0].include_for_lineage == "setToFalse"

- name: close session
  uri:
    url: "https://{{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports_ext.console }}/ibm/iis/igc-rest/v1/logout/"
    method: GET
    validate_certs: no
    headers:
      Cookie: "{{ __minimal_lineage.set_cookie }}"
  when: ('ibm_information_server_domain' in group_names)

- import_role: name=IBM.infosvr-import-export
  vars:
    ingest:
      datastage:
        - from: "metadata/ibm-igc/ds_tabledefs_{{ egeria_samples_minimal_db_type }}.isx"
          into_project: minimal
          with_options:
            overwrite: True
        - from: "metadata/ibm-igc/ds_jobs_{{ egeria_samples_minimal_db_type }}.isx"
          into_project: minimal
          with_options:
            overwrite: True

- name: remove cached files
  file:
    path: cache/__ibm_infosvr_cert_root.crt
    state: absent
  delegate_to: localhost
