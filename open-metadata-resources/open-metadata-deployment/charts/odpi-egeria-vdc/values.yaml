# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---

# Egeria information
# repomode: supported values are in-memory-repository & local-graph-repository
# version: This is used for egeria images rather than 'tag' above, which is only used for other images
egeria:
  version: 1.8-SNAPSHOT
  repomode: local-graph-repository
  user: myuser
  cohort: coco
  server: myserver

# Default values used for images
# 'tag' is only used for images other than connectors/egeria where the version above is used
imageDefaults:
  registry: docker.io
  namespace: odpi
  tag: latest
  pullPolicy: Always


# Network configuration
# note that load balancer configuration tends to be cloud-specific
# So review the templates/loadbalancer* files for any
# required updates

service:
  # LoadBalancer is another option (not for IBM Cloud free cluster)
  # ClusterIP is recommended for IBMCloud - and enable ingress below
  # NodePort will work ok in other environments, including IBM ICP, but note that the ports may
  # well be non standard and services will be at http://<external address of a workernode>:<randomport>
  # Review output from 'kubectl get services' to see the external port used
  type: NodePort
  externalName: default.svc.cluster.local

  loadbalancer:
    enabled: false
    iptype: public
    publicip: <undefined>
  # Currently IBMCloud is the only supported setting, and enabled additional Ingress rules. Comment out for other platforms.

  ingress:
    # Update this with your own domain
    enabled: false
    externaldomain: egeriadev.eu-gb.containers.appdomain.cloud
    cloudservice: IBMCloud

  # If type is NodePort, these are the ports we will request - but if not free, another will be allocated
  # and then things may not work externally. LoadBalancer & Ingress are recommended if possible.
  # Ports are required to be in the range 30000-32767 for IBM Cloud
  nodeport:
    egeria: 30080
    atlas: 31000
    atlas_kafka: 31092
    atlasproxy: 30082
    ibmigc: 32446
    ibmigc_kafka: 32092
    igcproxy: 30081
    gaian: 30414
    postgresql: 30432
    ui: 30443
    ranger: 32080
    rangersecure: 30182
    apachezookeeper: 32181
    solr: 30983
    # Set this to address of one of the local nodes - public IP
    externalip: 10.10.1.30
    # KAFKA is not exposed externally (issues in chart, complexity)

istio:
  # If true, will include the sidecar.istio.io/inject: "true" annotation in each
  # pod, so as to inject the istio sidecar into each pod.
  # This will not occur for ldap or embedded kafka as these are deployed via
  # an independent kafka chart.
  # Ensure you have the namespace being deployed into labelled for injection via
  # kubectl label namespace MYNAMESPACE istio-injection=enabled
  enabled: false

# Options to switch off certain components (not egeria)
ui:
  enabled: true

atlas:
  enabled: true
  user: admin
  password: admin
  proxyserver: apacheatlas

gaian:
  enabled: true

ranger:
  enabled: true

# NOTE: postgresql is required for ranger, so will be automatically enabled if ranger is enabled
# (also used for sample data, even if not using ranger)
postgresql:
  enabled: true

# NOTE: solr will eventually be required for both ranger and atlas, so will be automatically enabled if either of
# those is enabled (once their embedded Solr's are migrated)
solr:
  enabled: false

# NOTE: zookeeper is needed for both Solr and Kafka (and therefore for Ranger and Atlas as well)
# This is independent on zookeeper in use for kafka
apachezookeeper:
  enabled: false

# Debug support for Egeria - set to true to enable JVM debug for Egeria images on port 5005
debug:
  egeriaJVM: false

# Logging level - affects all spring components by setting LOG_LEVEL_ROOT. 
logging:
  level: OFF

# Egeria Conformance Test Suite - sets up to run against all Egeria repositories (if enabled=true)
cts:
  enabled: false

# The following section defines all of the DOCKER images being used by this chart. Normally they should be left as is,
# but are exposed here in case the user wishes to extend. By default, each will use the 'imageDefaults' above, but
# these can be individually overridden for each image, if desired, by providing a subkey for 'namespace', 'tag' or
# 'pullPolicy' with the value to use for the override (if you want to use the public Docker registry, use
# 'docker.io/library' as the registry override, and set namespace to be your user or organization id).
#
#  To build from egeria source - (example)
#  mvn clean install -Ddocker -Ddocker.registry=localhost:5000 -Ddocker.repo=odpi
image:
  egeria:
    name: egeria

  configure:
    name: egeria-configure

  atlas:
    name: apache-atlas

  gaian:
    name: gaian-egeriavdc

  ranger:
    name: apache-ranger-admin

  postgresql:
    namespace: library
    name: postgres
    tag: alpine

  solr:
    namespace: library
    name: solr
    tag: 7-slim

  # this image is used only for atlas, solr - and not for kafka (if internal version in use)
  apachezookeeper:
    namespace: library
    name: zookeeper

  # NOTE: this image is only used if the ibmigc.external is set to false; otherwise it is ignored and
  # the k8s-external, pre-existing environment defined under ibmigc... is used
  ibmigc:
    registry: "localhost:5000"
    namespace: ibm
    name: infosvr
    tag: v11.7.0.2

# These should not be embedded under 'image' (?)
nameOverride: ""
fullnameOverride: ""

# Set 'use' to true to use your local repository rather than Egeria's (remote) master git repository
# (When set to true, also provide the absolute path to your local repository)
localRepo:
  use: false
  location: /some/where/egeria

# Whether to use a k8s cluster-internal Kafka or an external one -- if using internal,
# see 'cp-kafka' below for config options
kafka:
  # prefix for all topic names used in Egeria - whether internal or external kafka 
  # Note that in many cases production kafka will require all topics to be created manually
  topicroot: egeria
  internal:
    enabled: true
  external:
    enabled: false
    # Only 'IBMEventStreams' currently supported
    provider: none
    # k8s secret that needs defining externally with 'username' and 'password'
    # For IBMEventStreams you can also set 'username' to 'token' and set 'password' to <APIKEY>
    secret: ""
    # Comma seperated list of brokers (typically 5 for event streams)
    brokers: ""


# The demo can use an IBM IGC environment.
# Set external to "true" to use a pre-existing IBM IGC environment (outside your k8s cluster),
# in which case, also provide the hostname, IP address and port number for the domain tier
ibmigc:
  enabled: false
  user: isadmin
  password: isadmin
  proxyserver: ibmigc
  internal:
    enabled: false
  external:
    enabled: false
    hostname: ""
    ip: ""
    ports:
      https: "9446"
      broker: "59092"

# When using the k8s-internal we configure with some non-standard values to simplify deployment
# For full documentation on this kafka chart see https://github.com/bitnami/charts/tree/master/bitnami/kafka
# Note that the kafka support (if used) uses it's own zookeeper
egeriakafka:
  securityContext:
    enabled: false
  zookeeper:
    persistence:
      enabled: false
  persistence:
    enabled: false


# Open LDAP configuration
openldap:
  adminPassword: passw0rd
  configPassword: passw0rd
  servicePort: 389
  enabled: true
